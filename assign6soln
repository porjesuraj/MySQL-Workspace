@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

classwork subquery

Sub Query
If we write select query inside select query then it is called sub query.
If we sub query returns single row then it is called single row sub query.


(1)Find all emps whose sal is more than avg sal of emps.

 empno | ename  | job       | mgr  | hire       | sal     | comm  

 @sal = (SELECT avg(sal) FROM EMP)
 SELECT * FROM EMP
WHERE sal > (SELECT avg(sal) FROM EMP);



2 Find emp with 3rd highest sal

SELECT MAx(sal)
FROM EMP
ORDER BY SAL DESC
LIMIT 2,1;

SELECT * FROM EMP
WHERE sal (SELECT MAx(sal)
FROM EMP
ORDER BY SAL DESC
LIMIT 2,1;)


SELECT * FROM EMP 
WHERE sal = (SELECT DISTINCT sal
FROM EMP
ORDER BY SAL DESC
LIMIT 2,1);

3 Display emps whose sal is more than sal of all salesman
SELECT sal 
SELECT * FROM emp;
SELECT sal FROM emp WHERE job='salesman';
SELECT MAX(sal) FROM emp WHERE job='salesman';
SET @SAL = 1600.00;
SELECT * FROM emp WHERE sal > @SAL;

SELECT * FROM EMP WHERE sal > ( SELECT MAX(sal) FROM EMP WHERE
job='salesman' );

4 Display emps whose sal is more than sal of all salesman


SELECT * FROM EMP WHERE sal > ( SELECT MAX(sal) FROM EMP WHERE
job='salesman' );


5 Display emps whose sal is more than sal of any salesman;

SELECT MIN(sal) from
EMP
WHERE job = 'salesman';
SET @SAL = 1250;
SELECT * FROM EMP
WHERE JOB != 'salesman' AND sal > ANY(SELECT sal from
EMP WHERE job = 'salesman');

6Display depts in which emps are there

SELECT deptno from EMP;
SELECT * FROM DEPT
WHERE deptno IN (SELECT DISTINCT deptno from EMP);

_______________________________________________
If sub query depends of outer query then it is called co related sub query.

SELECT * FROM dept d
WHERE deptno IN ( SELECT deptno from emp e WHERE e.deptno = d.deptno );

1

Display depts in which emps exists

SELECT * FROM DEPT d
WHERE deptno EXIST (SELECT deptno FROM EMP e WHERE e.deptno = d.deptno);

SELECT * FROM dept d
WHERE deptno exists ( SELECT deptno from EMP e WHERE e.deptno = d.deptno );

2
Display depts in which emps doesn't exists

SELECT * FROM dept d
WHERE deptno not exists( SELECT deptno from EMP e WHERE e.deptno = d.deptno);

SELECT * FROM DEPT d
WHERE NOT EXISTS ( SELECT deptno from EMP e WHERE e.deptno = d.deptno );

3 Delete emps from emp table whose sal is less than avg(sal) of emp
SELECT * FROM EMP
DELETE 


We can not perform DML operations on table which is used in sub query.

DELETE FROM dept d
WHERE NOT EXISTS ( SELECT deptno from emp e WHERE e.deptno = d.deptno );



IF we want to process multi row sub query then we should use ALL, ANY and IN operator.
ALL : equivalent to logical AND
ANY : equivalent to logocal OR
IN : To check range of values

4Display depts in which emps doesn't exists












DROP USER 'sunbeam'@'localhost';


Sunbeam Institute Of Technology , Pune & Karad
DATABASE TECHNOLOGY



Write the join queries to do the following :-



Note : To solve below queries use “ hr ” database




1 . Display department name and manager first name .
 
SELECT d.DEPARTMENT_NAME,e.FIRST_NAME,e.MANAGER_ID
FROM  departments d INNER JOIN employees e
ON d.MANAGER_ID = e.MANAGER_ID;



2 . Display department name , manager name , and city .

SELECT DISTINCT d.DEPARTMENT_NAME,e.FIRST_NAME,e.MANAGER_ID,l. CITY 
FROM departments d INNER JOIN employees e
ON d.MANAGER_ID = e.MANAGER_ID
INNER JOIN locations l
ON l.LOCATION_ID = d.LOCATION_ID; 


3 . Display country name , city , and department name .

countries,locations, departments

SELECT c.COUNTRY_NAME,l.CITY,d.DEPARTMENT_NAME
FROM locations l INNER JOIN departments d
ON l.LOCATION_ID = d.LOCATION_ID
INNER JOIN countries c
ON c.COUNTRY_ID = l.COUNTRY_ID;


4 . Display job title , department name , employee last name ,
starting date for all jobs from 2000 to 2005 .
countries    |
| departments  |
| employees    |
| job_history  |
| jobs         |
| locations    |
| regions   


SELECT j.JOB_TITLE,d.DEPARTMENT_NAME,e.LAST_NAME,jh.START_DATE 
FROM employees e INNER JOIN departments d
ON e.MANAGER_ID = d.MANAGER_ID
INNER JOIN job_history jh
ON jh.EMPLOYEE_ID = e.EMPLOYEE_ID
INNER JOIn jobs j
ON j.JOB_ID = j.JOB_ID 
WHERE START_DATE BETWEEN '1994-01-01' AND '1998-01-01';    


5 . Display job title and average salary of employees

SELECT j.JOB_TITLE,AVG(e.SALARY)
FROM employees e INNER JOIN jobs j
ON e.JOB_ID = j.JOB_ID
GROUP BY JOB_TITLE;



6 . Display job title , employee name , and the difference
between maximum salary for the job and salary of the
employees


SELECT j.JOB_TITLE,e.FIRST_NAME,MAX(e.SALARY) "diff in salary"
FROM jobs j INNER JOIN employees e
ON e.JOB_ID = j.JOB_ID
GROUP BY SALARY,JOB_TITLE,FIRST_NAME;



7 . Display last name , job title of employees who have
commission percentage and belongs to department 80 .



SELECT e.LAST_NAME,j.JOB_TITLE
  FROM jobs j INNER JOIN employees e
  ON j.JOB_ID=e.JOB_ID  
  WHERE e.DEPARTMENT_ID=80 AND  COMMISSION_PCT > 0 ;


8 . Display details of jobs that were done by any employee who
is currently drawing more than 15000 of salary .

SELECT j.*
  from jobs j INNER JOIN employees e
  ON j.JOB_ID=e.JOB_ID
  where e.salary>15000;


9 . Display department name , manager name , and salary of the
manager for all managers whose experience is more than 5
years .





10 . Display employee name if the employee joined before his
manager 

select DISTINCT m.FIRST_NAME,m.LAST_NAME
  from employees e INNER JOIN employees m
  ON e.MANAGER_ID=m.EMPLOYEE_ID
WHERE e.HIRE_DATE > m.HIRE_DATE;


11 . Display employee name , job title for the jobs employee did
in the past where the job was done less than six months .





12 . Display employee name and country in which he is
working .

select e.FIRST_NAME,e.LAST_NAME,c.COUNTRY_NAME
  from employees e INNER JOIN departments d
  ON e.DEPARTMENT_ID=d.DEPARTMENT_ID
  INNER JOIN locations l
  ON d.LOCATION_ID=l.LOCATION_ID
  INNER JOIN countries c
  ON l.COUNTRY_ID=c.COUNTRY_ID; 




13 . Display department name , average salary and number of
employees with commission within the department .


select d.DEPARTMENT_NAME,AVG(e.SALARY),COUNT(e.EMPLOYEE_ID)
   from employees e INNER JOIN departments d
   ON e.DEPARTMENT_ID=d.DEPARTMENT_ID
   where COMMISSION_PCT>0
   group by  d.DEPARTMENT_NAME;

14 . Display the month in which more than 5 employees joined
in any department located in Sydney .

select month(e.HIRE_DATE) abc
  from employees e INNER JOIN departments d
  ON e.DEPARTMENT_ID=d.DEPARTMENT_ID
  INNER JOIN locations l
  ON d.LOCATION_ID=l.LOCATION_ID
  where l.CITY='Seattle'
  group by abc
  having abc>5;

15 . Display details of departments in which the maximum salary
is more than 10000 .

select d.*, MAX(e.SALARY)
  from departments d INNER JOIN employees e
  ON d.DEPARTMENT_ID=e.DEPARTMENT_ID
  group by DEPARTMENT_ID
  having MAX(SALARY)>10000;


16 . Display employee name , job title , start date , and end date
of past jobs of all employees with commission percentage null .


select e.FIRST_NAME, e.LAST_NAME, j.JOB_TITLE, jh.START_DATE, jh.END_DATE								
from employees e INNER JOIN jobs j 
ON e.JOB_ID = j.JOB_ID
INNER JOIN  job_history jh
ON j.JOB_ID=jh.JOB_ID
WHERE COMMISSION_PCT = 0;




Note : To solve below queries use “ spj ” database



1 . Display the Supplier name and the Quantity sold .
2 . Display the Part name and Quantity sold .
3 . Display the Project name and Quantity sold .
4 . Display the Supplier name , Part name , Project name and
Quantity sold .
5 . Display the Supplier name , Supplying Parts to a Project in
the same City .
6 . Display the Part name that is ‘ Red ’ is color , and the
Quantity sold .Sunbeam Institute Of Technology , Pune & Karad
DATABASE TECHNOLOGY
7 . Display all the Quantity sold by Suppliers with the Status =
20 .
8 . Display all the Parts and Quantity with a Weight > 14 .
9 . Display all the Project names and City , which has bought
more than 500 Parts .
10 . Display all the Part names and Quantity sold that have a
Weight less than 15 .
11 . Display all the Suppliers with the same Status as the
supplier , ‘ CLARK ’.
12 . Display all the Employees in the same department as the
employee ‘ MILLER ’.
13 . Display all the Parts which have more Weight than all the
Red parts .
14 . Display all the Projects going on in the same city as the
project ‘ TAPE ’.
15 . Display all the Parts with Weight less than all the Green
parts .
16 . Display the name of the Supplier who has sold the
maximum Quantity ( in onesale ).
17 . Display the name of the Employee with the minimum
Salary .
18 . Display the name of the Supplier who has sold the
maximum overall Quantity ( sumof Sales ).


Sunbeam Institute Of Technology , Pune & Karad
DATABASE TECHNOLOGY
________________________________________________________________________

Note : To solve below queries use “ sales ” database
----------------------------------------------------------------------------

1 . Write a query that lists each order number followed by the
name of the customer who made the order .
cnum | cname    | city     | rating | snum   from CUSTOMERS;

 onum | amt     | odate      | cnum | snum    ORDERS


snum | sname   | city      | comm |            SALESPEOPLE;


SELECT o.onum,c.cname 
FROM 
ORDERS o INNER JOIN CUSTOMERS c
ON o.cnum = c.cnum;



2 . Write a query that gives the names of both the salesperson
and the customer for each order along with the order number .

-----------------------------------------------------------------
cnum | cname    | city     | rating | snum   from CUSTOMERS;

 onum | amt     | odate      | cnum | snum    ORDERS


snum | sname   | city      | comm |            SALESPEOPLE;
__________________________________________________________________

SELECT c.cname, o.onum, s.sname
FROM CUSTOMERS c INNER JOIN ORDERS o
ON c.cnum = o.cnum
INNER JOIN SALESPEOPLE s
ON o.snum = s.snum




3 . Write a query that produces all customers serviced by
salespeople with a commission above 12 %. Output the
customer ’ s name , the salesperson ’ s name , and the salesperson ’ s
rate of commission .
-----------------------------------------------------------------
cnum | cname    | city     | rating | snum   from CUSTOMERS;

 onum | amt     | odate      | cnum | snum    ORDERS


snum | sname   | city      | comm |            SALESPEOPLE;
__________________________________________________________________

SELECT c.cname,s.sname,s.comm
FROM 
CUSTOMERS c INNER JOIN SALESPEOPLE s
ON c.snum = s.snum
WHERE s.comm >0.12;


4 . Write a query that calculates the amount of the
salesperson’s commission on each order by a customer with a
rating above 100 .

SELECT s.sname,c.cname,c.rating,o.amt*s.comm AS COMMIN 
FROM ORDERS o INNER JOIN CUSTOMERS c
ON o.cnum = c.cnum
INNER JOIN SALESPEOPLE s
ON c.snum = s.snum
WHERE c.rating >100;


SELECT c.cname, c.rating, o.onum, s.sname, o.amt * s.comm AS Commision
FROM CUSTOMERS c INNER JOIN ORDERS o
ON c.cnum = o.cnum
INNER JOIN SALESPEOPLE s
ON c.snum = s.snum
WHERE c.rating > 100;




5 . Write a query that produces all pairs of salespeople who are
living in the same city . Exclude combinations of salespeople with
themselves as well as duplicate rows with
the order reversed .
snum | sname   | city      | comm |            SALESPEOPLE;

SELECT s1.sname,s1.city,s2.sname,s2.city
 FROM
SALESPEOPLE s1 INNER JOIN SALESPEOPLE s2
ON s1.sname = s2.sname
WHERE s1.sname > s2.sname;


SELECT s1.sname, s1.city, s2.sname, s2.city
FROM SALESPEOPLE s1 INNER JOIN SALESPEOPLE s2
ON s1.sname = s2.sname
WHERE s1.sname > s2.sname;




6 . Write a query that produces the names and cities of all
customers with the same rating as Hoffman .

cnum | cname    | city     | rating | snum   from CUSTOMERS;

SELECT c1.cname,c1.city
FROM CUSTOMERS c1 INNER JOIN CUSTOMERS c2
ON c1.rating = c2.rating
WHERE c2.cname = 'Hoffman' AND c1.cname != 'Hoffman';



class work 25.2.2020

create database practice;




CREATE TABLE dept
(
deptno INT,
dname VARCHAR(50),
CONSTRAINT PK_DEPT_DEPTNO
PRIMARY KEY(deptno)
);

INSERT INTO dept
VALUES
(10,'DEV'),
(20,'QA'),
(30,'ACCOUNT'),
(40,'OPERATIONS');



CREATE TABLE emp
(
empno INT,
ename VARCHAR(50),
deptno INT,
CONSTRAINT PK_EMP_EMPNO PRIMARY KEY(empno),
CONSTRAINT FK_EMP_DEPT FOREIGN KEY ( deptno ) REFERENCES dept( deptno
)
);

SHOW VARIABLES LIKE 'f%';
SELECT @@foreign_key_checks = 0;

INSERT INTO emp
VALUES
(1, 'Rahul', 10),
(2, 'Amit', 10),
(3, 'Sandeep', 20),
(4, 'Nilesh', 50),
(5, 'Nitin', 50);

CREATE TABLE address
(
id INT AUTO_INCREMENT,
loc VARCHAR(50),
pincode CHAR(6),
empno INT,
CONSTRAINT PK_ADDRESS_ID PRIMARY KEY(id), 
CONSTRAINT FK_ADDRESS_EMP
FOREIGN KEY ( empno ) REFERENCES emp( empno )
);


INSERT INTO address
( loc, pincode, empno )
VALUES
('Karad','11111', 1),
('Kolhapur','22222', 2),
('A.Nagar','33333', 3),
('Junnar','44444', 4),
('Panchgani','55555', 5);

CREATE TABLE meeting
(
meetno INT,
topic VARCHAR(50),
venue VARCHAR(50),
CONSTRAINT PK_MEETING_MEETNO PRIMARY KEY ( meetno )
);


INSERT INTO meeting
VALUES
( 100, 'Scheduling', 'Directors Cabin'),
( 200, 'Annual Meet', 'Board Room'),
( 300,'App Desgin','Co-Directors Cabin');

CREATE TABLE emp_meeting
(
id INT AUTO_INCREMENT,
meetno INT,
empno INT,
CONSTRAINT PK_EMP_MEETING_ID PRIMARY KEY ( id ),
CONSTRAINT FK_EM_MEETING FOREIGN KEY ( meetno ) REFERENCES meeting(
meetno ),
CONSTRAINT FK_EM_EMP FOREIGN KEY ( empno ) REFERENCES emp( empno )
);




INSERT INTO emp_meeting
( meetno, empno )
VALUES
( 100, 3),
( 100, 4),
( 100, 5),
( 200, 1),
( 200, 2),
( 200, 3),
( 200, 4),
( 200, 5),
( 300, 1 ),
( 300, 2 ),
( 300, 5 );


Print meeting topic and emp names attending that meeting


id | meetno | empno - emp_meeting

| meetno | topic       | venue     - meeting

 empno | ename   | deptno  - emp

id | loc       | pincode | empno  - address

deptno | dname  - dept

SELECT m.meetno,m.topic,e.empno,e.ename
FROM 
 meeting m INNER JOIN emp_meeting em
ON m.meetno = em.meetno
INNER JOIN emp e
ON e.empno = em.empno;


Print meeting topic and employee names and their addresses

SELECT m.meetno,m.topic,e.empno,e.ename,a.loc
FROM 
 meeting m INNER JOIN emp_meeting em
ON m.meetno = em.meetno
INNER JOIN emp e
ON e.empno = em.empno
INNER JOIN address a
ON e.empno = a.empno;


Print meeting topic and enames and their depts

SELECT m.topic,e.ename,d.deptno
FROM 
 meeting m INNER JOIN emp_meeting em
ON m.meetno = em.meetno
INNER JOIN emp e
ON e.empno = em.empno
INNER JOIN dept d
ON d.deptno = e.deptno;

 Print meeting topic and employee names and their depts as well as addresses


SELECT m.topic,e.ename,d.deptno,a.loc
FROM 
 meeting m INNER JOIN emp_meeting em
ON m.meetno = em.meetno
INNER JOIN emp e
ON e.empno = em.empno
INNER JOIN dept d
ON d.deptno = e.deptno
INNER join address a
ON e.empno = a.empno;



Write a query that lists each order number followed by the name of the customer who made the order.















